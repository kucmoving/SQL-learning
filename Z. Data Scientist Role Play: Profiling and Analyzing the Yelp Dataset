Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:

-- SELECT COUNT(*)
-- FROM table
/* just simply change the table*/

i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000



2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

-- SELECT COUNT(DISTINCT key)
-- ROM table
/* check the column which has a special icon */

i. Business = 10000(id)
ii. Hours = 1562(business_id)
iii. Category = 2643(business_id)
iv. Attribute = 1115(business_id)
v. Review = 10000(id), 8090(business_id), 9581(user_id)
vi. Checkin = 493(business_id)
vii. Photo = 10000(id), 6493 (business_id)
viii. Tip = 537(user_id), 3979 (business_id)
ix. User = 10000(id)
x. Friend = 11(user_id)
xi. Elite_years = 2780(user_id)

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: NO

	SQL code used to arrive at answer:

SELECT id
FROM User
WHERE id = null

4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

--function like this
/* SELECT FUNCTION(column)
FROM table; */

	i. Table: Review, Column: Stars

		min:1    	max:5		avg:3.7082


	ii. Table: Business, Column: Stars

		min:1.0		max:5.0		avg:3.6549


	iii. Table: Tip, Column: Likes

		min:0		max:2		avg:0.0144


	iv. Table: Checkin, Column: Count

		min:1		max:53		avg:1.9414


	v. Table: User, Column: Review_count

		min:0		max:2000	avg:24.2995



5. List the cities with the most reviews in descending order:

SQL code used to arrive at answer:

/* I am really sorry that my english level is not that great.
not really understand whether should i count the number or sum the number
but the ans should be sum() or count()*/

SELECT city, sum(review_count) as overall_count
FROM business
GROUP BY city
ORDER BY overall_count DESC

Copy and Paste the Result Below:
+-----------------+---------------+
| city            | overall_count |
+-----------------+---------------+
| Las Vegas       |         82854 |
| Phoenix         |         34503 |
| Toronto         |         24113 |
| Scottsdale      |         20614 |
| Charlotte       |         12523 |
| Henderson       |         10871 |
| Tempe           |         10504 |
| Pittsburgh      |          9798 |
| Montréal        |          9448 |
| Chandler        |          8112 |
| Mesa            |          6875 |
| Gilbert         |          6380 |
| Cleveland       |          5593 |
| Madison         |          5265 |
| Glendale        |          4406 |
| Mississauga     |          3814 |
| Edinburgh       |          2792 |
| Peoria          |          2624 |
| North Las Vegas |          2438 |
| Markham         |          2352 |
| Champaign       |          2029 |
| Stuttgart       |          1849 |
| Surprise        |          1520 |
| Lakewood        |          1465 |
| Goodyear        |          1155 |
+-----------------+---------------+


6. Find the distribution of star ratings to the business in the following cities:

/* remeber to use GROUP BY to group the first column on your left hand side.
Otherwise SUM() is not work */

i. Avon

SQL code used to arrive at answer:

SELECT stars, SUM(review_count)
FROM business
WHERE city ='Avon'
GROUP BY stars
ORDER BY stars DESC

Copy and Paste the Resulting Table Below (2 columns �� star rating and count):
+-------+-------------------+
| stars | SUM(review_count) |
+-------+-------------------+
|   5.0 |                 3 |
|   4.5 |                31 |
|   4.0 |                21 |
|   3.5 |                88 |
|   2.5 |                 6 |
|   1.5 |                10 |
+-------+-------------------+

ii. Beachwood

SQL code used to arrive at answer:

SELECT stars, SUM(review_count) AS SUM_COUNT
FROM business
WHERE city ='Beachwood'
GROUP BY stars
ORDER BY stars DESC

Copy and Paste the Resulting Table Below (2 columns �� star rating and count):

+-------+-----------+
| stars | SUM_COUNT |
+-------+-----------+
|   5.0 |        23 |
|   4.5 |        17 |
|   4.0 |        69 |
|   3.5 |         6 |
|   3.0 |        11 |
|   2.5 |         3 |
|   2.0 |         8 |
+-------+-----------+

7. Find the top 3 users based on their total number of reviews:

	SQL code used to arrive at answer:

SELECT name, review_count
FROM user
ORDER BY review_count DESC

	Copy and Paste the Result Below:

+-----------+--------------+
| name      | review_count |
+-----------+--------------+
| Gerald    |         2000 |
| Sara      |         1629 |
| Yuri      |         1339 |


8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:

SELECT name, review_count, fans
FROM user
ORDER BY review_count DESC

+-----------+--------------+------+
| name      | review_count | fans |
+-----------+--------------+------+
| Gerald    |         2000 |  253 |
| Sara      |         1629 |   50 |
| Yuri      |         1339 |   76 |
| .Hon      |         1246 |  101 |
| William   |         1215 |  126 |
| Harald    |         1153 |  311 |
| eric      |         1116 |   16 |
| Roanna    |         1039 |  104 |
| Mimi      |          968 |  497 |
| Christine |          930 |  173 |
| Ed        |          904 |   38 |
| Nicole    |          864 |   43 |

not really. there is no such relationship between number of fans and number of reviews


9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:
more word with"love"
love with 1780 counts and hate with 232 counts

	SQL code used to arrive at answer:

SELECT COUNT(text)
FROM REVIEW
WHERE text like '%love%';

SELECT COUNT(text)
FROM REVIEW
WHERE text like '%hate';



10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:

SELECT name, fans
FROM user
ORDER BY fans DESC;

	Copy and Paste the Result Below:

+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |


Part 2: Inferences and Analysis

1. Pick one city and category of your choice and
group the businesses in that city or category by their overall star rating.
Compare the businesses with 2-3 stars to the businesses with 4-5 stars
and answer the following questions. Include your code.

Toronto
Restaurant

i. Do the two groups you chose to analyze have a different distribution of hours?
>yes. lower rating group tend to have long working hours.

ii. Do the two groups you chose to analyze have a different number of reviews?
>yes. higher rating group receive higher review_count.

iii. Are you able to infer anything from the location data provided between these two groups? Explain.
>not exactly. i know the actual location about postal_code, latitlude and longitude. but those numbers are not easy to read.
>maybe we can search it in the web
>just like  M5V, M5H 1X6, M5B 2E5 ... ????

SQL code used for analysis:

SELECT b.city, b.name, b.stars, b.review_count, c.category, h.hours, b.postal_code
From business b
INNER JOIN category c
ON b.id = c.business_id
INNER JOIN hours h
ON c.business_id = h.business_id
WHERE b.city = 'Toronto' and c.category ='Restaurants'
GROUP BY b.stars;



